Stacy is an office manager who wants to create an office directory. She's going to use Git for version control and build the directory in simple html and css.

She'll start off by creating a folder called "employee-directory" anywhere she'd like by running the command: mkdir employee-directory. Next she goes into that directory with the command: cd employee-directory.

Inside this directory let's create an index.html file with the command: touch index.html. We'll then open it up in our text editor of choice and make a few changes to it. We'll add the html element, the head and body elements, and just fill it out a little bit more.

We should have something that looks like this:

<html>
  <head>
    <title>Employee Directory</title>
  </head>
  <body>
    <h1>Employee Directory</h1>
    <ul>
      <li>Martina Florentine</li>
      <li>Lorenzo DiGiovanni</li>
      <li>Ajna Mehta</li>
    </ul>
  </body>
  
So far we haven't done anything with Git, so let's rectify that. Inside the command line, we'll run the command: git init.

The git init command creates a folder called .git. By Unix convention, any file or folder that starts with a period is hidden, but what you need to know is that we just created a Git repository.

So we've come across our first Git term: repository. You may often hear it called 'repo' for short. A repository is, essentially, your files and the history associated with them.

What we want to do next is run the command: git status. This should now tell us that we have untracked files. Untracked files are files that have been created in the directory that your repo references but you have not told Git to track the history of.

We can tell Git to track index.html by running the command: git add index.html. This will track just the index.html file. There are some other ways to add files:

>git add index.html
Add just a single file
>git add .
Adds all modified or untracked files

index.html is now in the state of being "staged." Staging a file tells Git that you have modified a file and you plan on keeping those modifications.

Ultimately, however, nothing is actually kept until you commit the staged changes. To commit files, run the command: git commit.

The first time you do this, it will ask you for your name and email:
git config --global user.email "you@example.com"                                                                                             
git config --global user.name "Your Name" 

This will open up your default editor. Generally this will be vi. So we hit 'i' to start typing we can write out a message detailing what we've changed. This is your way to tell people who might come across code later what the point of your changes were and provide a small summary of what you did.

You'll notice that there is some stuff already here. But it's preceded by a hash, so it won't end up in your commit message--anything that starts with a hash is treated as a comment and isn't include in the commit message.

You don't want to just make a commit message, however, you want to make a good commit message. A good commit message has a few parts:

A summary: this should be shorter than 50 characters. In fact, you'll notice that inside the editor, the color of the message changes if we go beyond 50 characters.
Explanation: this is optional, but gives you the opportunity to explain why you did something. The editor will wrap your explanation by default. Some people say that you should always use a "command" type phrasing: e.g. "Create a new file" instead of "Creates a new file" or "Created a new file" for your message.

This is a small one so we'll just write "Create initial file" as our summary. Hit "esq" and then type ":" and "w" and "q" and hit "enter" and our file has been commite. The file is now back to the "unmodified" state.

The states might seem confusing at first, but it's actually pretty straight-forward. Let's take a look at a graph of the states. [In presentation]

The initial state of any file is "untracked." A file will remain in this status until you tell Git to track it. Once you do that, it remains in this loop of statuses indefinitely or until you untrack the file.

From there, a file goes into the "unmodifed" status. This is where it sits until you make a change to it, where it then goes to the--appropriately enough--"modified" state.

In the "modified" state, the file is waiting for you to stage it, which generally means that you're happy with the current state of the file and you're ready to commit those changes to history. Usually you stage something by using the git add command.

As we see later, though, you aren't stuck with a change if you stage and want to make some more changes-not until you commit the change with the git commit command. Committing the file will return it to the "unmodifed" state.

So let's go back to the directory file we're working on. Unfortunately Lorenzo has decide to leave the company and so Stacy needs to remove him from the employee directory. What we now have should be this:

<html>
  <head>
    <title>Employee Directory</title>
  </head>
  <body>
    <h1>Employee Directory</h1>
    <ul>
      <li>Martina Florentine</li>
      <li>Ajna Mehta</li>
    </ul>
  </body>

Stacy stages these changes with the command: git add index.html. But she takes one more look at the file and realizes that there's been a missing close html tag there all along. She adds it and has this as a file:

<html>
  <head>
    <title>Employee Directory</title>
  </head>
  <body>
    <h1>Employee Directory</h1>
    <ul>
      <li>Martina Florentine</li>
      <li>Ajna Mehta</li>
    </ul>
  </body>
</html>

Stacy runs the command: git status. She notices that the file is both staged and unstaged, what's with that? Well, the version of the file that is staged is the version where she removed Lorenzo. The unstaged version is the one that added the closing tag--the most recent version. If Stacy were to commit the staged changes now, it would only commit the version where she removed Lorenzo. Let's stage the newest changes.

Great, if we ask for the status, we'll see that index.html is staged and ready to be committed. Commit this quickly and we'll move on to the next task.

Stacy makes one more change and adds a phone number for each person:

<html>
  <head>
    <title>Employee Directory</title>
  </head>
  <body>
    <h1>Employee Directory</h1>
    <ul>
      <li>Martina Florentine -- 979.479.4843 </li>
      <li>Ajna Mehta -- 512.293.1251 </li>
    </ul>
  </body>
</html>

But as soon as Stacy makes this change, she gets pulled away into a three hour long meeting. When she gets back, she can't even remember what she did.

Git has a command for that: git diff

This command will show exactly what was changed in the modified files. There's one catch, though: this command will only work with files that haven't yet been staged. If Stacy wanted to see what had been changed in staged files, she would just need to pass a flag: git diff --staged

Now, after all that work, Stacy's boss comes over and wants to know what she's been up to and what changes she's been making. Well, as you can imagine, since git is all about tracking history, there's a command for that: git log

This will show you all of the commits on the current branch, including the date, author, and description. 

If we want to go back to any of those commits, it's incredibly easy: just copy the SHA (the number right after "commit") and use the command: git checkout <SHA>

The SHA is a hash that indexes the commit--quite long to ensure that it's always unique.

If we check out that commit, you'll see we're back to where we were when Stacy made that commit. This is a great way to step back in the history of a project. You can use 'j' or 'k' to move up and down, or just use the arrow keys. Type 'q' to get out of there.

I have a friend who does interactive graphical work, and he showed me how his colleagues use git to show how the creative process unfolds. Another time that the ability to check out specific commits is useful is when you are attempting to debug an issue. If something is broken you can go back in time and say: did this commit break it? No? Did this one? No? And so forth until you find the offending change.

There are a surprising amount of options you can pass through for git log. If you want a little information, you can include the stat flag, which will include statistics about each commit: git log --stat. If you want less information (just the highlights, if you will), use: git log --oneline. And to have it graphed, use: git log --graph. That last one will be really useful once you start working with other people.

If you don't want to do date calculations in your head about how long ago something was, use: git log --relative-date. 

You can also use -n (where n is a number) to limit the number of commits you get back. Of course, you can combine these commands, so you could say: git log -2 --oneline

There are other flags, but the final one I'll tell you about is grep. The grep flag allows you search commit messages and return all commits that include the search term. Just use: git log --grep=<term>

But let's back up for a second. I mentioned earlier that git log showed commits on the current branch. What's a branch?

A branch is, essentially, a new path for your repository to go. Each branch is a pointer to a specific commit, with HEAD being the pointer for the current commit.

Branches are incredibly useful when working with other people. So let's imagine Stacy wants to add to the directory but she doesn't want to affect the work that her colleagues are doing until after she's done with her contributions. A branch is ideal for this.

To create a new branch, Stacy uses the command: git branch <branch-name>

And since she'll be adding email addresses, she calls the branch email-addresses. To see all the branches that currently exists, she'll (and you'll) use the command: git branch. To switch to a branch, use the command: git checkout <branch-name>.

Now she makes some changes, maybe adding the email addresses, as the branch name would imply, until she has the following:

<html>
  <head>
    <title>Employee Directory</title>
  </head>
  <body>
    <h1>Employee Directory</h1>
    <ul>
      <li>Martina Florentine -- 979.479.4843 -- mflorentine@company.co</li>
      <li>Ajna Mehta -- 512.293.1251 -- amehta@company.co</li>
    </ul>
  </body>
</html>

She stages and then commits the changes and decides she's done.

Generally, when you're working with Git, everything branches off the master branch so that the master branch is, well, the "master" branch. Stacy, being done, decides to merge her branch into the master branch.

To do this she goes back to the master branch by using the command: git checkout master.

She then merges her branch into master by using the git merge command: git merge <branch-name>.

Git will check the two branches to see if they are mergeable. You can easily imagine a scenario where multiple people are working on a single repository and they change the same thing on multiple branches. Git is usually pretty good about guessing what you want to keep, but if you change the same thing on multiple branches, it leaves the decision of what to keep up to you. Git will tell you that you have "merge conflicts" and require you to fix them before you continue.

Stacy is working alone so far in this example so she won't have any merge conflicts, but let's fake one real quick.







